"""
Unit tests for {{ stage_name }} stage of {{ agent_name }}.

This module contains unit tests to verify the functionality of the {{ stage_name }} stage.
"""

import unittest
import os
import tempfile
import json
from unittest.mock import patch, MagicMock

from {{ agent_name|replace("-", "_") }}.stages.{{ stage_name }} import {{ stage_class.name }}


class Test{{ stage_class.name }}(unittest.TestCase):
    """Test case for the {{ stage_name }} stage."""
    
    def setUp(self):
        """Set up test fixtures."""
        # Mock configuration for testing
        self.mock_config = {
            "logging": {
                "level": "DEBUG"
            },
            "source": {
                "type": "test",
                "value": "test_data"
            },
            "output": {
                "format": "json",
                "destination_type": "local_file",
                "destination_value": "test_output.json"
            }
        }
        
        # Initialize the stage
        self.stage = {{ stage_class.name }}(self.mock_config)
    
    def tearDown(self):
        """Tear down test fixtures."""
        pass
    
    def test_process(self):
        """Test the process method."""
        # Mock input data
        mock_data = {
            "test_key": "test_value"
        }
        
        # Call the process method
        result = self.stage.process(mock_data)
        
        # Assert result
        self.assertIsNotNone(result)
        self.assertIn("status", result)
        self.assertEqual(result["status"], "success")
    
    {% for method in stage_class.methods %}
    {% if method.name != "process" and not method.name.startswith("_") %}
    def test_{{ method.name }}(self):
        """Test the {{ method.name }} method."""
        # Mock inputs
        {% for param in method.params %}
        mock_{{ param.name }} = {% if param.type == "str" %}"test_{{ param.name }}"{% elif param.type == "int" %}42{% elif param.type == "float" %}3.14{% elif param.type == "bool" %}True{% elif param.type == "Dict" %}{}{% elif param.type == "List" %}[]{% else %}MagicMock(){% endif %}
        {% endfor %}
        
        # Call the method
        result = self.stage.{{ method.name }}(
            {% for param in method.params %}
            {{ param.name }}=mock_{{ param.name }},
            {% endfor %}
        )
        
        # Assert result
        self.assertIsNotNone(result)
    
    {% endif %}
    {% endfor %}
    def test_process_with_errors(self):
        """Test the process method with error conditions."""
        # Mock input data with invalid format
        mock_invalid_data = None
        
        # Call the process method and expect exception handling
        result = self.stage.process(mock_invalid_data)
        
        # Assert error result
        self.assertIsNotNone(result)
        self.assertIn("status", result)
        self.assertEqual(result["status"], "error")
        self.assertIn("error", result)


if __name__ == '__main__':
    unittest.main()