"""
AWS Lambda Handler for {{ agent_name }}

This module is the entry point for the AWS Lambda function deployment
of the agent generated by AutoGenesis.
"""

import json
import logging
import os
import sys
import traceback
from typing import Dict, Any, Optional

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Import main module based on architecture
try:
    {% if architecture_type == "simple_script" %}
    import main
    {% elif architecture_type == "service" %}
    from {{ task_type }}_service import main
    {% else %}
    from {{ task_type }}_agent import main
    {% endif %}
    logger.info("Successfully imported main module")
except ImportError as e:
    logger.error(f"Failed to import main module: {str(e)}")
    raise

def handler(event, context):
    """
    AWS Lambda handler function.
    
    Args:
        event: AWS Lambda event
        context: AWS Lambda context
        
    Returns:
        Dict containing response
    """
    logger.info(f"Received event: {json.dumps(event)}")
    
    try:
        # Determine input from event
        if 'body' in event:
            # API Gateway event
            try:
                input_data = json.loads(event['body'])
            except json.JSONDecodeError:
                input_data = event['body']
        else:
            # Direct invocation
            input_data = event
        
        # Set environment variables from event if provided
        if 'env' in input_data:
            for key, value in input_data.get('env', {}).items():
                os.environ[key] = str(value)
        
        # Call the agent's main function
        result = main.lambda_handler(input_data, context)
        
        # Format response based on invocation type
        if 'httpMethod' in event:
            # API Gateway response
            response = {
                'statusCode': 200,
                'headers': {
                    'Content-Type': 'application/json'
                },
                'body': json.dumps(result)
            }
        else:
            # Direct invocation response
            response = result
        
        return response
        
    except Exception as e:
        logger.error(f"Error processing request: {str(e)}")
        logger.error(traceback.format_exc())
        
        # Format error response based on invocation type
        if 'httpMethod' in event:
            # API Gateway error response
            return {
                'statusCode': 500,
                'headers': {
                    'Content-Type': 'application/json'
                },
                'body': json.dumps({
                    'error': str(e),
                    'traceback': traceback.format_exc()
                })
            }
        else:
            # Direct invocation error response
            return {
                'error': str(e),
                'traceback': traceback.format_exc()
            }